name: Deploy PitchTrainer to IONOS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests only (fast, no external deps)
        run: npm run test:unit
        env:
          CI: true
      
      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to IONOS Server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.IONOS_SSH_PRIVATE_KEY }}
          SERVER_HOST: ${{ secrets.IONOS_SERVER_HOST }}
          SERVER_USER: ${{ secrets.IONOS_SSH_USER }}
          MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        run: |
          # Setup SSH
          mkdir -p ~/.ssh
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/deploy_key
          chmod 600 ~/.ssh/deploy_key
          ssh-keyscan -H $SERVER_HOST >> ~/.ssh/known_hosts
          
          # Deploy to server
          ssh -i ~/.ssh/deploy_key $SERVER_USER@$SERVER_HOST << 'EOF'
            set -e
            
            # Create project directory if it doesn't exist
            mkdir -p ~/pitrain
            cd ~/pitrain
            
            # Clone or update repository
            if [ ! -d ".git" ]; then
              git clone https://github.com/andreassigloch/pitrain.git .
            else
              git fetch origin
              git reset --hard origin/main
            fi
            
            # Create production environment file
            cat > .env.production << 'ENVEOF'
MISTRAL_API_KEY=${{ secrets.MISTRAL_API_KEY }}
NODE_ENV=production
PORT=3000
DATABASE_PATH=/data/pitrain.db
ALLOWED_ORIGINS=https://pitrain.waffelwurst.de
MISTRAL_TRANSCRIPTION_MODEL=voxtral-mini-latest
MISTRAL_EVALUATION_MODEL=mistral-small-latest
MISTRAL_BASE_URL=https://api.mistral.ai/v1
MAX_AUDIO_DURATION=900
MAX_FILE_SIZE=10485760
REQUEST_TIMEOUT=30000
RATE_LIMIT_WINDOW=900000
RATE_LIMIT_MAX_REQUESTS=100
LOG_LEVEL=info
ENVEOF
            
            # Create data directory
            mkdir -p ./data
            
            # Build Docker image
            docker build -t pitrain:latest .
            
            # Stop and remove existing container
            docker stop pitrain_app 2>/dev/null || true
            docker rm pitrain_app 2>/dev/null || true
            
            # Start new container
            docker run -d \
              --name pitrain_app \
              --restart unless-stopped \
              -p 3000:3000 \
              --env-file .env.production \
              -v "$(pwd)/data:/data" \
              pitrain:latest
              
            # Wait for container to start
            sleep 10
            
            # Test health endpoint
            curl -f http://localhost:3000/health || {
              echo "❌ Health check failed, checking logs:"
              docker logs pitrain_app --tail 20
              exit 1
            }
            
            # Create NGINX config if it doesn't exist
            if [ ! -f /etc/nginx/sites-enabled/pitrain.conf ]; then
              sudo tee /etc/nginx/sites-enabled/pitrain.conf > /dev/null << 'NGINXEOF'
server {
    listen 80;
    server_name pitrain.waffelwurst.de;
    return 301 https://$server_name$request_uri;
}

server {
    listen 443 ssl http2;
    server_name pitrain.waffelwurst.de;

    ssl_certificate /etc/letsencrypt/live/waffelwurst.de/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/waffelwurst.de/privkey.pem;

    location / {
        proxy_pass http://localhost:3000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
    }

    location /api/ {
        proxy_pass http://localhost:3000/api/;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        client_max_body_size 10M;
    }
}
NGINXEOF
              
              # Test and reload NGINX
              sudo nginx -t && sudo systemctl reload nginx
            fi
            
            echo "✅ Deployment complete"
          EOF

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Verify Deployment
        run: |
          echo "🔍 Checking deployment health..."
          
          # Wait for service to start
          sleep 30
          
          # Check health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://pitrain.waffelwurst.de/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "✅ Deployment successful! Health check passed."
          else
            echo "❌ Deployment verification failed. HTTP status: $response"
            exit 1
          fi
          
          # Check API endpoint
          api_response=$(curl -s -o /dev/null -w "%{http_code}" https://pitrain.waffelwurst.de/api/statistics || echo "000")
          
          if [ "$api_response" = "200" ]; then
            echo "✅ API endpoints responding correctly."
          else
            echo "⚠️  API endpoint check failed. HTTP status: $api_response"
            # Don't fail the build for API issues
          fi