name: Deploy PitchTrainer to IONOS

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run unit tests only (fast, no external deps)
        run: npm run test:ci
        env:
          CI: true
      
      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.IONOS_SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.IONOS_SERVER_HOST }} >> ~/.ssh/known_hosts
          
      - name: Deploy to IONOS Server
        run: |
          echo "üöÄ Starting PitchTrainer deployment..."
          
          # Create deployment script (following MultiServer pattern)
          cat << 'EOF' > deploy.sh
          #!/bin/bash
          set -e
          echo "üöÄ Starting PitchTrainer deployment..."
          
          # Create project directory if it doesn't exist
          mkdir -p ~/pitrain
          cd ~/pitrain
          
          # Clone or update repository
          if [ ! -d '.git' ]; then
            git clone https://github.com/andreassigloch/pitrain.git .
          else
            git fetch origin
            git reset --hard origin/main
          fi
          
          # Create production environment file
          cat > .env.production << ENV
          MISTRAL_API_KEY=${MISTRAL_API_KEY}
          NODE_ENV=production
          PORT=3000
          DATABASE_PATH=/data/pitrain.db
          ALLOWED_ORIGINS=https://pitrain.waffelwurst.de
          MISTRAL_TRANSCRIPTION_MODEL=voxtral-mini-latest
          MISTRAL_EVALUATION_MODEL=mistral-small-latest
          MISTRAL_BASE_URL=https://api.mistral.ai/v1
          MAX_AUDIO_DURATION=900
          MAX_FILE_SIZE=10485760
          REQUEST_TIMEOUT=30000
          RATE_LIMIT_WINDOW=900000
          RATE_LIMIT_MAX_REQUESTS=100
          LOG_LEVEL=info
          ENV
          
          # Create data directory
          mkdir -p ./data
          
          # Build Docker image
          docker build -t pitrain:latest .
          
          # Stop and remove existing container
          docker stop pitrain_app 2>/dev/null || true
          docker rm pitrain_app 2>/dev/null || true
          
          # Start new container
          docker run -d \
            --name pitrain_app \
            --restart unless-stopped \
            -p 3000:3000 \
            --env-file .env.production \
            -v "$(pwd)/data:/data" \
            --network waffelwurst_frontend \
            pitrain:latest
            
          # Wait for container to start
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:3000/health || {
            echo "‚ùå Health check failed, checking logs:"
            docker logs pitrain_app --tail 20
            exit 1
          }
          
          echo "‚úÖ PitchTrainer deployed successfully!"
          echo "üìù Manual step: Add NGINX config for pitrain.waffelwurst.de"
          SCRIPT
          
          EOF
          
          chmod +x deploy.sh
          
          # Execute deployment on server (following MultiServer pattern)
          ssh -o StrictHostKeyChecking=no ${{ secrets.IONOS_SSH_USER }}@${{ secrets.IONOS_SERVER_HOST }} 'MISTRAL_API_KEY="${{ secrets.MISTRAL_API_KEY }}" bash -s' < deploy.sh
          
      - name: Cleanup
        if: always()
        run: |
          rm -f ~/.ssh/id_rsa
          rm -f deploy.sh

  verify:
    needs: deploy
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Verify Deployment
        run: |
          echo "üîç Checking deployment health..."
          
          # Wait for service to start
          sleep 30
          
          # Check health endpoint
          response=$(curl -s -o /dev/null -w "%{http_code}" https://pitrain.waffelwurst.de/health || echo "000")
          
          if [ "$response" = "200" ]; then
            echo "‚úÖ Deployment successful! Health check passed."
          else
            echo "‚ùå Deployment verification failed. HTTP status: $response"
            echo "‚ÑπÔ∏è  This might be expected if NGINX config is not yet active"
            exit 1
          fi